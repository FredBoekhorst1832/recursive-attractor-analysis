import numpy as np

def digital_root(n):
    if n == 0:
        return 9
    return n % 9 if n % 9 != 0 else 9

def generate_additive_sequence(a0, a1, length):
    seq = [a0, a1]
    for _ in range(2, length):
        next_val = digital_root(seq[-1] + seq[-2])
        seq.append(next_val)
    return seq

def generate_multiplicative_sequence(m0, multiplier, length):
    seq = [m0]
    for _ in range(1, length):
        next_val = digital_root(seq[-1] * multiplier)
        seq.append(next_val)
    return seq

def generate_overtone_sequence(add_seq, mult_seq, mode='add'):
    overtone = []
    for a, m in zip(add_seq, mult_seq):
        if mode == 'add':
            overtone.append(digital_root(a + m))
        elif mode == 'subtract':
            overtone.append(digital_root(a - m))
        else:
            raise ValueError("Mode must be 'add' or 'subtract'")
    return overtone

def detect_cycle(sequence):
    for cycle_length in range(1, len(sequence) // 2):
        cycle = sequence[:cycle_length]
        repeats = True
        for i in range(len(sequence)):
            if sequence[i] != cycle[i % cycle_length]:
                repeats = False
                break
        if repeats:
            return cycle, cycle_length
    return None, None

# Example run
if __name__ == "__main__":
    length = 1000
    additive_seq = generate_additive_sequence(0, 1, length)
    multiplicative_seq = generate_multiplicative_sequence(1, 2, length)
    overtone_seq = generate_overtone_sequence(additive_seq, multiplicative_seq, mode='add')

    print("Additive cycle detection:")
    cycle, period = detect_cycle(additive_seq)
    if cycle:
        print(f"Cycle detected (period {period}): {cycle}")
    else:
        print("No cycle detected.")

    print("\nMultiplicative cycle detection:")
    cycle, period = detect_cycle(multiplicative_seq)
    if cycle:
        print(f"Cycle detected (period {period}): {cycle}")
    else:
        print("No cycle detected.")

    print("\nOvertone (additive) cycle detection:")
    cycle, period = detect_cycle(overtone_seq)
    if cycle:
        print(f"Cycle detected (period {period}): {cycle}")
    else:
        print("No cycle detected.")
